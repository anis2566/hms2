generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String          @default("User")
  status        String          @default("Pending")

  doctor        Doctor?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}


model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  gender    String
  phone     String
  address   String
  imageUrl  String?
  dob       DateTime
  emergencyContact String
  bloodGroup String?
  images    String[] @default([])

  health    PatientHealth?

  medicalRecords MedicalRecord[]
  appointments Appointment[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientHealth {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bloodGroup String
  height     Int
  weight     Int
  allergies  String?
  habits   String?
  medicalHistory String?

  patientId String @db.ObjectId @unique
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Doctor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  title     String
  email     String
  password  String
  phone     String
  address   String
  imageUrl  String?

  userId    String   @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  medicalRecords MedicalRecord[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Treatment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String

  medicalRecordTreatments MedicalRecordTreatment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Medicine {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?
  sideEffects String?
  price Int

  genericId String @db.ObjectId
  generic   MedicineGeneric @relation(fields: [genericId], references: [id])

  manufacturerId String @db.ObjectId
  manufacturer   MedicineManufacturer @relation(fields: [manufacturerId], references: [id])

  medicalRecords MedicalRecordMedicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model MedicineGeneric {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?

  medicines Medicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicineManufacturer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?
  imageUrl  String?

  medicines Medicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalRecord {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  complains     String
  diagnosis String?
  vitalSigns String?
  attachments String[] @default([])

  doctorId  String @db.ObjectId
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  patientId String @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  treatments MedicalRecordTreatment[]
  medicines MedicalRecordMedicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model MedicalRecordTreatment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId

  medicalRecordId String        @db.ObjectId
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  
  treatmentId     String        @db.ObjectId
  treatment       Treatment     @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([medicalRecordId, treatmentId])
}


model MedicalRecordMedicine {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  instruction String
  frequency String
  quantity Int
  dosage String[]
  dosageQuantity Int

  medicineId String @db.ObjectId
  medicine   Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade)

  medicalRecordId String @db.ObjectId
  medicalRecord MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([medicalRecordId, medicineId])
}


model Appointment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    String @default("Pending")

  serviceId String @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  patientId String @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  doctorId String @db.ObjectId
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  method    String
  status    String @default("Pending")

  patientId String @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?
  price Int
  status    String

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}